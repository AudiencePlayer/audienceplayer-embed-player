{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://audienceplayer-embed-player/webpack/bootstrap","webpack://audienceplayer-embed-player/./src/models/player.ts","webpack://audienceplayer-embed-player/./src/models/play-config.ts","webpack://audienceplayer-embed-player/webpack/runtime/define property getters","webpack://audienceplayer-embed-player/webpack/runtime/hasOwnProperty shorthand","webpack://audienceplayer-embed-player/./src/logging/player-log-processor.ts","webpack://audienceplayer-embed-player/./src/logging/player-logger-service.ts","webpack://audienceplayer-embed-player/./src/video-player/video-player.ts","webpack://audienceplayer-embed-player/./src/utils/platform.ts","webpack://audienceplayer-embed-player/./src/utils/eme.ts","webpack://audienceplayer-embed-player/./src/api/converters.ts","webpack://audienceplayer-embed-player/./src/chromecast/chromecast-sender.ts","webpack://audienceplayer-embed-player/./src/api/graph-request.ts","webpack://audienceplayer-embed-player/./src/api/api-service.ts","webpack://audienceplayer-embed-player/./src/api/queries.ts","webpack://audienceplayer-embed-player/./src/embed-player.ts","webpack://audienceplayer-embed-player/./src/chromecast/chromecast-controls.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","export var PlayingState;\n(function (PlayingState) {\n    PlayingState[PlayingState[\"loading\"] = 0] = \"loading\";\n    PlayingState[PlayingState[\"playing\"] = 1] = \"playing\";\n    PlayingState[PlayingState[\"paused\"] = 2] = \"paused\";\n    PlayingState[PlayingState[\"idle\"] = 3] = \"idle\";\n    PlayingState[PlayingState[\"buffering\"] = 4] = \"buffering\";\n    PlayingState[PlayingState[\"error\"] = 5] = \"error\";\n})(PlayingState || (PlayingState = {}));\nexport class PlayerLogPayload {\n}\n// generic abstraction of player events that are taken from the video player, Chromecast and mobile implementations\nexport var PlayerEventTypes;\n(function (PlayerEventTypes) {\n    PlayerEventTypes[\"playStart\"] = \"playStart\";\n    PlayerEventTypes[\"playing\"] = \"playing\";\n    PlayerEventTypes[\"pause\"] = \"pause\";\n    PlayerEventTypes[\"error\"] = \"error\";\n    PlayerEventTypes[\"stopped\"] = \"stopped\";\n    PlayerEventTypes[\"timeupdate\"] = \"timeupdate\";\n    PlayerEventTypes[\"textTrackChanged\"] = \"textTrackChanged\";\n    PlayerEventTypes[\"audioTrackChanged\"] = \"audioTrackChanged\";\n})(PlayerEventTypes || (PlayerEventTypes = {}));\nexport var PlayerDeviceTypes;\n(function (PlayerDeviceTypes) {\n    PlayerDeviceTypes[\"chromecast\"] = \"chromecast\";\n    PlayerDeviceTypes[\"default\"] = \"\";\n})(PlayerDeviceTypes || (PlayerDeviceTypes = {}));\nexport var PlayerEventTypePayloads;\n(function (PlayerEventTypePayloads) {\n    PlayerEventTypePayloads[\"play\"] = \"play\";\n    PlayerEventTypePayloads[\"playing\"] = \"playing\";\n    PlayerEventTypePayloads[\"paused\"] = \"paused\";\n    PlayerEventTypePayloads[\"stop\"] = \"stop\";\n    PlayerEventTypePayloads[\"error\"] = \"error\";\n    PlayerEventTypePayloads[\"configure\"] = \"configure\";\n})(PlayerEventTypePayloads || (PlayerEventTypePayloads = {}));\nexport var PulseMode;\n(function (PulseMode) {\n    PulseMode[\"live\"] = \"live\";\n    PulseMode[\"archive\"] = \"archive\";\n    PulseMode[\"offline\"] = \"offline\";\n})(PulseMode || (PulseMode = {}));\n","export var ArticlePlayErrors;\n(function (ArticlePlayErrors) {\n    ArticlePlayErrors[\"noPlayableAsset\"] = \"noPlayableAsset\";\n    ArticlePlayErrors[\"notAuthenticated\"] = \"notAuthenticated\";\n    ArticlePlayErrors[\"needEntitlement\"] = \"needEntitlement\";\n    ArticlePlayErrors[\"serverError\"] = \"serverError\";\n    ArticlePlayErrors[\"offlineError\"] = \"offlineError\";\n    ArticlePlayErrors[\"maxConcurrentStreamNumberError\"] = \"maxConcurrentStreamNumberError\";\n})(ArticlePlayErrors || (ArticlePlayErrors = {}));\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","import { PlayerEventTypePayloads, PlayerEventTypes, PlayingState, PulseMode, } from '../models/player';\nconst MAX_EVENTS = 30;\nexport class PlayerLogProcessor {\n    constructor(baseUrl, projectId) {\n        this.playLogs = [];\n        this.apiCallInProgress = false;\n        this.intervalHandle = null;\n        this.apiUrl = `${baseUrl}/service/${projectId}/analytics/stream/pulse/log`.replace(/\\/*$/, '');\n    }\n    init() {\n        if (this.intervalHandle === null) {\n            this.intervalHandle = setInterval(() => {\n                this.processFirstPlayLog();\n            }, 3000);\n        }\n    }\n    destroy() {\n        if (this.intervalHandle) {\n            clearInterval(this.intervalHandle);\n        }\n    }\n    processPlaySession(playSession, timeStamp) {\n        if (!playSession) {\n            return;\n        }\n        const eventStack = playSession.eventStack;\n        if (eventStack.length === 0) {\n            return;\n        }\n        const eventStackPayload = [];\n        let i = 0, sumDelta = 0, lastEventWasProcessed = false;\n        while (i < eventStack.length) {\n            const currentEvent = eventStack[i];\n            if (this.isEventTypeWithoutTimeDelta(currentEvent.eventType)) {\n                // directly process these events. they have no sumDelta and do not affect the play state\n                eventStackPayload.push(this.convertEventToEventPayload(currentEvent));\n                lastEventWasProcessed = true;\n            }\n            else {\n                lastEventWasProcessed = false;\n                if (i - 1 >= 0) {\n                    const previousEvent = eventStack[i - 1];\n                    sumDelta += currentEvent.timeStamp - previousEvent.timeStamp;\n                    if (currentEvent.state !== previousEvent.state) {\n                        eventStackPayload.push(this.createDeltaEventPayload(previousEvent, previousEvent.timeStamp, sumDelta));\n                        sumDelta = 0;\n                    }\n                }\n            }\n            i++;\n        }\n        const lastEvent = eventStack[eventStack.length - 1];\n        if (sumDelta > 0 || !lastEventWasProcessed) {\n            eventStackPayload.push(this.createDeltaEventPayload(lastEvent, timeStamp, sumDelta));\n        }\n        if (eventStackPayload.length > 0) {\n            if (eventStackPayload.length > MAX_EVENTS) {\n                // if event stack too big, add error with runaway info and slice nr of items\n                const lastLogEvent = eventStackPayload[eventStackPayload.length - 1];\n                eventStackPayload.splice(MAX_EVENTS - 1);\n                lastLogEvent.event_type = PlayerEventTypePayloads.error;\n                lastLogEvent.event_payload = '{code: 429, message: \"Too many events\"}'; // runaway\n                eventStackPayload.push(lastLogEvent);\n            }\n            // check if there is already a log for this session\n            let playLogPayload = this.getPlayerLogPayloadWithPulseToken(playSession.pulseToken);\n            if (!playLogPayload) {\n                playLogPayload = {\n                    event_stack: [],\n                    pulse_token: playSession.pulseToken,\n                    pulse_mode: playSession.isLive ? PulseMode.live : PulseMode.offline,\n                    device_type: playSession.deviceType,\n                };\n                this.playLogs.push(playLogPayload);\n            }\n            // keep the event_stack pointer in tact by using push\n            eventStackPayload.forEach(e => playLogPayload.event_stack.push(e));\n            this.processPlayLog(playLogPayload, playSession);\n        }\n    }\n    processFirstPlayLog() {\n        if (this.playLogs.length > 0) {\n            this.processPlayLog(this.playLogs[0], null);\n        }\n    }\n    processPlayLog(currentLog, playSession) {\n        if (!currentLog || this.apiCallInProgress) {\n            return;\n        }\n        if (currentLog.event_stack.length === 0) {\n            this.removePlayLog(currentLog);\n            return;\n        }\n        const logToSend = {\n            ...currentLog,\n            event_stack: [],\n        };\n        let eventStackIndex = 0, isStopCutOff = false;\n        while (eventStackIndex < currentLog.event_stack.length && logToSend.event_stack.length < MAX_EVENTS && !isStopCutOff) {\n            const currentEvent = currentLog.event_stack[eventStackIndex];\n            eventStackIndex++;\n            logToSend.event_stack.push(currentEvent);\n            if (currentEvent.event_type === PlayerEventTypePayloads.stop) {\n                isStopCutOff = true;\n            }\n        }\n        // for offline logging, always accumulate until MAX_EVENTS before sending unless it's a stop cut off.\n        if (logToSend.pulse_mode === PulseMode.offline && logToSend.event_stack.length < MAX_EVENTS && !isStopCutOff) {\n            return;\n        }\n        // transaction start\n        this.apiCallInProgress = true;\n        return fetch(this.apiUrl, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                Accept: 'application/json',\n            },\n            body: JSON.stringify(logToSend),\n        })\n            .then(() => {\n            return true;\n        })\n            .catch(error => {\n            return error.status !== 0;\n        })\n            .then(response => {\n            if (response) {\n                currentLog.event_stack.splice(0, eventStackIndex);\n                if (currentLog.event_stack.length === 0) {\n                    this.removePlayLog(currentLog);\n                }\n            }\n            else {\n                currentLog.pulse_mode = PulseMode.archive;\n            }\n            this.apiCallInProgress = false;\n        });\n    }\n    getPlayerLogPayloadWithPulseToken(pulseToken) {\n        return this.playLogs.find(log => log.pulse_token === pulseToken);\n    }\n    removePlayLog(logPayload) {\n        const index = this.playLogs.findIndex(log => log.pulse_token === logPayload.pulse_token);\n        if (index >= 0) {\n            this.playLogs.splice(index, 1);\n        }\n    }\n    isEventTypeWithoutTimeDelta(eventType) {\n        return [PlayerEventTypes.textTrackChanged, PlayerEventTypes.audioTrackChanged, PlayerEventTypes.playStart].indexOf(eventType) >= 0;\n    }\n    createBaseEventPayload(playerEvent, eventType) {\n        return {\n            timestamp: playerEvent.timeStamp,\n            event_type: eventType,\n            appa: playerEvent.playPosition,\n            appr: Math.min(playerEvent.playPosition / playerEvent.mediaDuration, 1),\n        };\n    }\n    convertEventToEventPayload(playerEvent) {\n        if (playerEvent.eventType === PlayerEventTypes.playStart) {\n            return {\n                timestamp: playerEvent.timeStamp,\n                event_type: PlayerEventTypePayloads.play,\n            };\n        }\n        const eventType = this.convertEventTypeToEventTypePayload(playerEvent);\n        const baseEvent = this.createBaseEventPayload(playerEvent, eventType);\n        switch (playerEvent.eventType) {\n            case PlayerEventTypes.audioTrackChanged:\n                return {\n                    ...baseEvent,\n                    audio_locale: playerEvent.audioTrack,\n                };\n            case PlayerEventTypes.textTrackChanged:\n                return {\n                    ...baseEvent,\n                    subtitle_locale: playerEvent.textTrack,\n                };\n            default:\n                return baseEvent;\n        }\n    }\n    createDeltaEventPayload(playerEvent, timestamp, timeDelta) {\n        const eventType = this.getEventTypePayloadFromEventState(playerEvent);\n        const baseEvent = this.createBaseEventPayload(playerEvent, eventType);\n        const errorPart = playerEvent.state === PlayingState.error ? { event_payload: playerEvent.error } : {};\n        return {\n            ...baseEvent,\n            ...errorPart,\n            timestamp,\n            time_delta: timeDelta / 1000,\n        };\n    }\n    getEventTypePayloadFromEventState(playerEvent) {\n        switch (playerEvent.state) {\n            case PlayingState.playing:\n                return PlayerEventTypePayloads.playing;\n            case PlayingState.paused:\n                return PlayerEventTypePayloads.paused;\n            case PlayingState.error:\n                return PlayerEventTypePayloads.error;\n            case PlayingState.buffering:\n            case PlayingState.loading:\n                return PlayerEventTypePayloads.paused; // buffering and loading converted to paused for API\n            case PlayingState.idle:\n                return PlayerEventTypePayloads.stop;\n        }\n    }\n    convertEventTypeToEventTypePayload(playerEvent) {\n        switch (playerEvent.eventType) {\n            case PlayerEventTypes.playStart:\n                return PlayerEventTypePayloads.play;\n            case PlayerEventTypes.audioTrackChanged:\n            case PlayerEventTypes.textTrackChanged:\n                return PlayerEventTypePayloads.configure;\n            // because e.g. `timeupdate` events can happen while paused / playing, base the rest on state.\n            default: {\n                this.getEventTypePayloadFromEventState(playerEvent);\n            }\n        }\n    }\n}\n","import { PlayerLogProcessor } from './player-log-processor';\nimport { PlayerEventTypes, PlayingState } from '../models/player';\nexport class PlayerLoggerService {\n    constructor(baseUrl, projectId) {\n        this.intervalHandle = 0;\n        this.playerLogProcessor = new PlayerLogProcessor(baseUrl, projectId);\n        this.reset();\n    }\n    init() {\n        this.playerLogProcessor.init();\n    }\n    destroy() {\n        this.playerLogProcessor.destroy();\n    }\n    onStart(pulseToken, deviceType, localTimeDelta, isLive, onStopCallback) {\n        this.reset();\n        this.playSession = {\n            pulseToken,\n            deviceType,\n            eventStack: [],\n            localTimeDelta,\n            isLive,\n            onStopCallback,\n        };\n    }\n    onCurrentTimeUpdated(currentTime) {\n        this.playerProperties.playPosition = currentTime;\n        if (this.playerProperties.mediaDuration > 0 && this.playerProperties.state !== PlayingState.idle) {\n            this.logEvent(PlayerEventTypes.timeupdate);\n        }\n    }\n    onDurationUpdated(duration) {\n        this.playerProperties.mediaDuration = duration;\n    }\n    onPlaying() {\n        if (this.playerProperties.state !== PlayingState.playing) {\n            if (this.playerProperties.state === PlayingState.idle) {\n                this.playerProperties.state = PlayingState.playing;\n                this.logEvent(PlayerEventTypes.playStart);\n                this.processPlaySession();\n                this.startInterval();\n            }\n            else {\n                this.playerProperties.state = PlayingState.playing;\n                this.logEvent(PlayerEventTypes.playing);\n            }\n        }\n    }\n    onPause() {\n        if (this.playerProperties.state !== PlayingState.paused) {\n            this.playerProperties.state = PlayingState.paused;\n            this.logEvent(PlayerEventTypes.pause);\n        }\n    }\n    onError(error) {\n        if (this.playerProperties.state !== PlayingState.error) {\n            this.playerProperties.state = PlayingState.error;\n            this.playerProperties.error = error;\n            this.logEvent(PlayerEventTypes.error);\n        }\n    }\n    onStop() {\n        if (this.playerProperties.state !== PlayingState.idle) {\n            this.playerProperties.state = PlayingState.idle;\n            this.logEvent(PlayerEventTypes.stopped);\n            this.stopInterval();\n            this.processPlaySession();\n        }\n    }\n    onTextTrackChanged(textTrack) {\n        if (this.playerProperties.state === PlayingState.idle) {\n            return;\n        }\n        this.playerProperties.textTrack = textTrack;\n        this.logEvent(PlayerEventTypes.textTrackChanged);\n    }\n    onAudioTrackChanged(audioTrack) {\n        if (this.playerProperties.state === PlayingState.idle) {\n            return;\n        }\n        this.playerProperties.audioTrack = audioTrack;\n        this.logEvent(PlayerEventTypes.audioTrackChanged);\n    }\n    updateProperties(playerProperties) {\n        this.playerProperties = {\n            ...this.playerProperties,\n            ...playerProperties,\n        };\n    }\n    startInterval() {\n        this.stopInterval();\n        // @ts-ignore\n        this.intervalHandle = setInterval(() => {\n            this.processPlaySession();\n        }, 30000);\n    }\n    stopInterval() {\n        if (this.intervalHandle) {\n            clearInterval(this.intervalHandle);\n        }\n    }\n    processPlaySession() {\n        this.playerLogProcessor.processPlaySession({ ...this.playSession }, this.getTimeStamp());\n        this.playSession.eventStack = [];\n    }\n    logEvent(eventType) {\n        if (this.playSession) {\n            this.playSession.eventStack.push({\n                ...this.playerProperties,\n                eventType,\n                timeStamp: this.getTimeStamp(),\n            });\n        }\n    }\n    reset() {\n        this.playSession = null;\n        this.playerProperties = {\n            state: PlayingState.idle,\n            error: null,\n            mediaDuration: 0,\n            playPosition: 0,\n            audioTrack: null,\n            textTrack: null,\n        };\n    }\n    getTimeStamp() {\n        return Date.now() - (this.playSession ? this.playSession.localTimeDelta : 0);\n    }\n}\n","import { supportsHLS } from '../utils/platform';\nimport { PlayerLoggerService } from '../logging/player-logger-service';\nimport { PlayerDeviceTypes } from '../models/player';\nimport { getEmeOptionsFromEntitlement } from '../utils/eme';\nexport class VideoPlayer {\n    constructor(baseUrl, projectId) {\n        this.player = null;\n        this.playerLoggerService = new PlayerLoggerService(baseUrl, projectId);\n    }\n    init(initParams) {\n        this.destroy();\n        const videoContainer = initParams.selector instanceof Element ? initParams.selector : document.querySelector(initParams.selector);\n        if (!videoContainer) {\n            throw Error('Invalid selector or element for player');\n        }\n        this.playerLoggerService.init();\n        const videoElement = document.createElement('video');\n        videoElement.setAttribute('class', ['video-js', 'vjs-default-skin'].join(' '));\n        videoElement.setAttribute('tabIndex', '0');\n        videoElement.setAttribute('width', '100%');\n        videoElement.setAttribute('height', '100%');\n        videoContainer.appendChild(videoElement);\n        const playOptions = {\n            fluid: true,\n            controls: true,\n            controlBar: {\n                pictureInPictureToggle: false,\n                currentTimeDisplay: true,\n                durationDisplay: true,\n                timeDivider: false,\n                skipButtons: {\n                    forward: 5,\n                },\n                volumePanel: {\n                    inline: false,\n                },\n                // order of elements:\n                children: [\n                    'playToggle',\n                    'currentTimeDisplay',\n                    //\"timeDivider\",\n                    'progressControl',\n                    'durationDisplay',\n                    'liveDisplay',\n                    //\"remainingTimeDisplay\",\n                    'customControlSpacer',\n                    'playbackRateMenuButton',\n                    'chaptersButton',\n                    'descriptionsButton',\n                    'subtitlesButton',\n                    'captionsButton',\n                    'audioTrackButton',\n                    'volumePanel',\n                    'fullscreenToggle',\n                ],\n            },\n            aspectRatio: '16:9',\n            html5: {\n                vhs: {\n                    // do to use videojs-http-streaming\n                    overrideNative: false,\n                },\n            },\n            ...initParams.options,\n        };\n        this.player = videojs(videoElement, playOptions);\n        this.player.eme();\n        this.bindEvents();\n    }\n    play(playConfig, playParams) {\n        this.firstPlayingEvent = true;\n        if (!this.player || (this.player && this.player.currentSrc())) {\n            this.destroy();\n            this.init(playParams);\n        }\n        this.articlePlayConfig = playConfig;\n        this.playerLoggerService.onStart(playConfig.pulseToken, PlayerDeviceTypes.default, playConfig.localTimeDelta, true);\n        const hlsSources = playConfig.entitlements.filter(entitlement => entitlement.type === 'application/vnd.apple.mpegurl');\n        const configureHLSOnly = supportsHLS() && hlsSources.length > 0; // make sure there is actually HLS\n        const playSources = playConfig.entitlements\n            .map(entitlement => {\n            const emeOptions = getEmeOptionsFromEntitlement(entitlement);\n            return {\n                src: entitlement.src,\n                type: entitlement.type,\n                ...emeOptions,\n            };\n        })\n            .filter(playOption => {\n            return (playOption.type === 'application/vnd.apple.mpegurl' && configureHLSOnly) ||\n                (playOption.type !== 'application/vnd.apple.mpegurl' && !configureHLSOnly);\n        });\n        this.player.aspectRatio(playConfig.aspectRatio);\n        this.player.src(playSources);\n        if (playParams.fullscreen) {\n            this.player.requestFullscreen();\n        }\n        if (!configureHLSOnly) {\n            // non HLS only needs the text tracks\n            playConfig.subtitles.forEach(track => {\n                this.player.addRemoteTextTrack({\n                    kind: track.kind,\n                    src: track.src,\n                    srclang: track.srclang,\n                    label: track.label,\n                    enabled: track.srclang === playConfig.subtitleLocale,\n                });\n            });\n        }\n    }\n    setPoster(posterUrl) {\n        this.player.poster(posterUrl);\n    }\n    destroy() {\n        if (this.player) {\n            if (false === this.player.ended()) {\n                this.player.pause();\n                // only if we have not already caught the 'ended' event\n                // Be aware that the `stopped` emit also send along all kinds of info, so call _before_ disposing player\n                this.playerLoggerService.onStop();\n            }\n            this.player.dispose();\n        }\n        this.playerLoggerService.destroy();\n        this.player = null;\n    }\n    getPlayer() {\n        return this.player;\n    }\n    bindEvents() {\n        // same trick as azure media player; set label to language\n        this.player.on('loadeddata', () => {\n            const audioTracks = this.player.audioTracks();\n            for (let i = 0; i < audioTracks.length; i++) {\n                const element = audioTracks[i];\n                try {\n                    // readonly property in some cases\n                    element.label = element.language;\n                }\n                catch (e) { }\n            }\n        });\n        this.player.on('error', () => {\n            this.playerLoggerService.onError(JSON.stringify(this.player.error()));\n        });\n        this.player.on('playing', () => {\n            if (this.firstPlayingEvent) {\n                this.firstPlayingEvent = false;\n                if (this.articlePlayConfig.currentTime > 0) {\n                    this.player.currentTime(this.articlePlayConfig.currentTime);\n                }\n            }\n            this.checkSelectedTracks();\n            this.playerLoggerService.onPlaying();\n        });\n        this.player.on('pause', () => {\n            this.checkSelectedTracks();\n            if (this.player.paused() && !this.player.ended()) {\n                this.playerLoggerService.onPause();\n            }\n        });\n        this.player.on('ended', () => {\n            this.checkSelectedTracks();\n            this.playerLoggerService.onStop();\n        });\n        this.player.on('timeupdate', () => {\n            this.checkSelectedTracks();\n            this.playerLoggerService.onCurrentTimeUpdated(this.player.currentTime() || 0);\n        });\n        this.player.on('durationchange', () => {\n            this.checkSelectedTracks();\n            this.playerLoggerService.onDurationUpdated(this.player.duration());\n        });\n        this.player.on('loadedmetadata', () => {\n            const audioTrackList = this.player.audioTracks();\n            if (audioTrackList && audioTrackList.length > 0) {\n                // set default tracks when available\n                this.setDefaultAudioTrack();\n                this.setDefaultTextTrack();\n                this.metadataLoaded = true;\n            }\n            else {\n                // unfortunately there is no reliable way to know when iOS native binding to text-tracks is done\n                // (even after first play event, this is not true), so we resort to an old fashioned timeout\n                setTimeout(() => {\n                    this.setDefaultAudioTrack();\n                    this.setDefaultTextTrack();\n                    this.metadataLoaded = true;\n                }, 1000);\n            }\n        });\n    }\n    checkSelectedTracks() {\n        if (!this.metadataLoaded) {\n            return false;\n        }\n        let selectedAudioTrack = '';\n        let selectedTextTrack = '';\n        const tracks = this.player.textTracks();\n        for (let i = 0; i < tracks.length; i++) {\n            if (tracks[i].mode === 'showing' && tracks[i].kind === 'subtitles') {\n                selectedTextTrack = tracks[i].language;\n            }\n        }\n        const audioTracks = this.player.audioTracks();\n        for (let i = 0; i < audioTracks.length; i++) {\n            if (audioTracks[i].enabled) {\n                selectedAudioTrack = audioTracks[i].language;\n                break;\n            }\n        }\n        this.playerLoggerService.updateProperties({\n            textTrack: selectedTextTrack,\n            audioTrack: selectedAudioTrack,\n        });\n        if (this.currentTextTrack !== null && this.currentTextTrack !== selectedTextTrack) {\n            this.playerLoggerService.onTextTrackChanged(selectedTextTrack);\n        }\n        this.currentTextTrack = selectedTextTrack;\n        if (this.currentAudioTrack !== null && this.currentAudioTrack !== selectedAudioTrack) {\n            this.playerLoggerService.onAudioTrackChanged(selectedAudioTrack);\n        }\n        this.currentAudioTrack = selectedAudioTrack;\n    }\n    setDefaultTextTrack() {\n        if (this.articlePlayConfig.subtitleLocale) {\n            const tracks = this.player.textTracks();\n            for (let i = 0; i < tracks.length; i++) {\n                // textTracks is not a real array so no iterators here\n                if (tracks[i].mode !== 'disabled') {\n                    tracks[i].mode = 'disabled';\n                }\n            }\n            // it must be split up in to two loops, because two 'showing' items will break\n            for (let i = 0; i < tracks.length; i++) {\n                if (tracks[i].language === this.articlePlayConfig.subtitleLocale.toLowerCase() && tracks[i].kind === 'subtitles') {\n                    tracks[i].mode = 'showing';\n                    break;\n                }\n            }\n        }\n    }\n    setDefaultAudioTrack() {\n        if (this.articlePlayConfig.audioLocale) {\n            const audioTracks = this.player.audioTracks();\n            for (let i = 0; i < audioTracks.length; i++) {\n                if ((this.articlePlayConfig.audioLocale && audioTracks[i].language === this.articlePlayConfig.audioLocale.toLowerCase()) ||\n                    (this.articlePlayConfig.audioLocale === '' && i === 0)) {\n                    audioTracks[i].enabled = true;\n                    break;\n                }\n            }\n        }\n    }\n}\n","export function supportsHLS() {\n    return videojs.browser.IS_SAFARI || videojs.browser.IS_IOS;\n}\n","export function getEmeOptionsFromEntitlement(entitlement) {\n    let protectionInfo = null;\n    let emeOptions = {};\n    if (entitlement.protectionInfo) {\n        switch (entitlement.type) {\n            case 'application/dash+xml':\n                protectionInfo = entitlement.protectionInfo.find(p => p.type === 'Widevine');\n                if (protectionInfo) {\n                    emeOptions = {\n                        keySystems: {\n                            'com.widevine.alpha': protectionInfo.keyDeliveryUrl,\n                        },\n                        emeHeaders: {\n                            Authorization: protectionInfo.authenticationToken,\n                        },\n                    };\n                }\n                break;\n            case 'application/vnd.ms-sstr+xml':\n                protectionInfo = entitlement.protectionInfo.find(p => p.type === 'PlayReady');\n                if (protectionInfo) {\n                    emeOptions = {\n                        keySystems: {\n                            'com.microsoft.playready': protectionInfo.keyDeliveryUrl,\n                        },\n                        emeHeaders: {\n                            Authorization: protectionInfo.authenticationToken,\n                        },\n                    };\n                }\n                break;\n            case 'application/vnd.apple.mpegurl':\n                protectionInfo = entitlement.protectionInfo.find(p => p.type === 'FairPlay');\n                if (protectionInfo) {\n                    emeOptions = {\n                        keySystems: {\n                            'com.apple.fps.1_0': {\n                                certificateUri: protectionInfo.certificateUrl,\n                                getContentId: function () {\n                                    return getHostnameFromUri(protectionInfo.keyDeliveryUrl);\n                                },\n                                getLicense: function (emeOptions, contentId, keyMessage, callback) {\n                                    const payload = 'spc=' + binaryToBase64(keyMessage) + '&assetId=' + encodeURIComponent(contentId);\n                                    videojs.xhr({\n                                        uri: protectionInfo.keyDeliveryUrl,\n                                        method: 'post',\n                                        headers: {\n                                            'Content-type': 'application/x-www-form-urlencoded',\n                                            Authorization: protectionInfo.authenticationToken,\n                                        },\n                                        body: payload,\n                                        responseType: 'arraybuffer',\n                                    }, videojs.xhr.httpHandler(function (err, response) {\n                                        callback(null, parseLicenseResponse(response));\n                                    }, true));\n                                },\n                            },\n                        },\n                    };\n                }\n                break;\n        }\n    }\n    return emeOptions;\n}\nexport function binaryToBase64(a) {\n    let b = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=', c = [];\n    for (let d = 0; d < a.byteLength;) {\n        let e = a[d++];\n        c.push(b.charAt(e >> 2)),\n            (e = (3 & e) << 4),\n            d < a.byteLength\n                ? (c.push(b.charAt(e | (a[d] >> 4))),\n                    (e = (15 & a[d++]) << 2),\n                    d < a.byteLength\n                        ? (c.push(b.charAt(e | (a[d] >> 6))), c.push(b.charAt(63 & a[d++])))\n                        : (c.push(b.charAt(e)), c.push('=')))\n                : (c.push(b.charAt(e)), c.push('=='));\n    }\n    return c.join('');\n}\nexport function base64ToBinary(a) {\n    let b = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=', c = new Uint8Array(new ArrayBuffer((3 * a.length) / 4 + 4)), e = 0;\n    for (let d = 0; d < a.length;) {\n        let f = b.indexOf(a.charAt(d)), g = b.indexOf(a.charAt(d + 1));\n        if (((c[e++] = (f << 2) | (g >> 4)), '=' !== a.charAt(d + 2))) {\n            let h = b.indexOf(a.charAt(d + 2));\n            if (((c[e++] = (g << 4) | (h >> 2)), '=' !== a.charAt(d + 3))) {\n                let i = b.indexOf(a.charAt(d + 3));\n                c[e++] = (h << 6) | i;\n            }\n        }\n        d += 4;\n    }\n    return new Uint8Array(c.buffer, 0, e);\n}\nexport function parseLicenseResponse(response) {\n    const responseBody = String.fromCharCode.apply(null, new Uint8Array(response));\n    let b = responseBody.trim(), c = b.indexOf('<ckc>'), d = b.indexOf('</ckc>');\n    if (-1 === c || -1 === d) {\n        throw Error('License data format not as expected, missing or misplaced <ckc> tag');\n    }\n    c += 5;\n    b = b.substr(c, d - c);\n    return base64ToBinary(b);\n}\nexport function getHostnameFromUri(uri) {\n    let link = document.createElement('a');\n    link.href = uri;\n    return link.hostname;\n}\n","import { ArticlePlayErrors } from '../models/play-config';\nexport function toPlayConfig(config, continueFromPreviousPosition) {\n    const timeStamp = Date.parse(config.issued_at);\n    const entitlements = [];\n    // check if the entitlements contain FPS in order to know when to filter out aes\n    const filterAES = !!config.entitlements.find((entitlement) => entitlement.encryption_type === 'fps');\n    const configEntitlements = filterAES\n        ? config.entitlements.filter((entitlement) => {\n            return entitlement.encryption_type !== 'aes';\n        })\n        : config.entitlements;\n    const dashWidevine = configEntitlements.find((entitlement) => !!entitlement.token && entitlement.encryption_type === 'cenc' && entitlement.protocol.indexOf('dash') === 0);\n    const mssPlayReady = configEntitlements.find((entitlement) => !!entitlement.token && entitlement.encryption_type === 'cenc' && entitlement.protocol.indexOf('mss') === 0);\n    configEntitlements.forEach((configEntitlement) => {\n        const entitlement = {\n            src: configEntitlement.manifest,\n            type: configEntitlement.mime_type,\n            protectionInfo: null,\n        };\n        if (configEntitlement.token) {\n            entitlement.protectionInfo = [];\n            if (configEntitlement.encryption_type === 'cenc') {\n                if (!!dashWidevine) {\n                    entitlement.protectionInfo.push({\n                        type: 'Widevine',\n                        authenticationToken: 'Bearer ' + dashWidevine.token,\n                        keyDeliveryUrl: dashWidevine.key_delivery_url,\n                    });\n                }\n                if (!!mssPlayReady) {\n                    entitlement.protectionInfo.push({\n                        type: 'PlayReady',\n                        authenticationToken: 'Bearer=' + mssPlayReady.token,\n                        keyDeliveryUrl: mssPlayReady.key_delivery_url,\n                    });\n                }\n            }\n            else if (configEntitlement.encryption_type === 'fps') {\n                entitlement.protectionInfo = [\n                    {\n                        type: 'FairPlay',\n                        authenticationToken: 'Bearer ' + configEntitlement.token,\n                        certificateUrl: config.fairplay_certificate_url,\n                        keyDeliveryUrl: configEntitlement.key_delivery_url,\n                    },\n                ];\n            }\n        }\n        entitlements.push(entitlement);\n    });\n    const subtitles = config.subtitles.map((item) => ({\n        src: item.url,\n        srclang: item.locale,\n        kind: 'subtitles',\n        label: item.locale_label,\n    }));\n    return {\n        entitlements: entitlements,\n        subtitles: subtitles,\n        pulseToken: config.pulse_token,\n        currentTime: continueFromPreviousPosition ? config.appa : 0,\n        subtitleLocale: config.user_subtitle_locale,\n        audioLocale: config.user_audio_locale,\n        localTimeDelta: isNaN(timeStamp) ? 0 : Date.now() - timeStamp,\n        aspectRatio: config.aspect_ratio.replace('x', ':'),\n    };\n}\nexport function toArticle(article) {\n    return {\n        name: article.name,\n        metas: article.metas,\n        posters: article.posters.map(toFile),\n        images: article.images.map(toFile),\n    };\n}\nexport function toFile(file) {\n    return {\n        type: file.type,\n        url: file.url,\n        baseUrl: file.base_url,\n        fileName: file.file_name,\n    };\n}\nexport function getMetaValue(metas, key) {\n    const meta = metas.find((m) => m.key === key);\n    return meta ? meta.value : '';\n}\nexport function getResizedUrl(fileData, size) {\n    if (fileData) {\n        const { width, height } = size;\n        return `${fileData.baseUrl}/${width}x${height}/${fileData.fileName}`;\n    }\n    return '';\n}\nexport function getArticleTitle(article) {\n    return getMetaValue(article.metas, 'title') || article.name;\n}\nexport function getArticleBackgroundImage(article) {\n    if (article.posters.length > 0) {\n        return article.posters[0];\n    }\n    if (this.article.length > 0) {\n        return article.images[0];\n    }\n    return null;\n}\nexport function toPlayConfigError(code) {\n    switch (code) {\n        case 0:\n            return ArticlePlayErrors.offlineError;\n        case 401:\n            return ArticlePlayErrors.notAuthenticated;\n        case 402:\n            return ArticlePlayErrors.needEntitlement;\n        case 403:\n            return ArticlePlayErrors.notAuthenticated;\n        case 404:\n            return ArticlePlayErrors.noPlayableAsset;\n        case 429:\n            return ArticlePlayErrors.maxConcurrentStreamNumberError;\n        default:\n            return ArticlePlayErrors.serverError;\n    }\n}\n","/// <reference path=\"../../node_modules/@types/chromecast-caf-sender/index.d.ts\" />\nimport { getArticleTitle } from '../api/converters';\nexport class ChromecastSender {\n    constructor() {\n        this.castContext = null;\n        this.castPlayer = null;\n        this.castPlayerController = null;\n    }\n    init(chromecastReceiverAppId) {\n        return new Promise((resolve, reject) => {\n            if (chromecastReceiverAppId) {\n                window['__onGCastApiAvailable'] = (isAvailable) => {\n                    if (isAvailable && cast && cast.framework) {\n                        this.initializeCastApi(chromecastReceiverAppId);\n                        //Some Chromecast configurations are taking some time to initialize\n                        setTimeout(() => {\n                            resolve();\n                        }, 1000);\n                    }\n                };\n                const scriptElement = document.createElement('script');\n                scriptElement.src = 'https://www.gstatic.com/cv/js/sender/v1/cast_sender.js?loadCastFramework=1';\n                document.head.appendChild(scriptElement);\n            }\n            else {\n                reject('Chromecast Receiver Application Id is missing');\n            }\n        });\n    }\n    initializeCastApi(chromecastReceiverAppId) {\n        cast.framework.CastContext.getInstance().setOptions({\n            receiverApplicationId: chromecastReceiverAppId,\n            autoJoinPolicy: chrome.cast.AutoJoinPolicy.ORIGIN_SCOPED,\n        });\n        this.castContext = cast.framework.CastContext.getInstance();\n        this.castPlayer = new cast.framework.RemotePlayer();\n        this.castPlayerController = new cast.framework.RemotePlayerController(this.castPlayer);\n    }\n    getCastMediaInfo(articlePlayConfig, article) {\n        if (articlePlayConfig && articlePlayConfig.entitlements && articlePlayConfig.entitlements.length > 0) {\n            const tracks = articlePlayConfig.subtitles.map((option, index) => {\n                const trackId = index + 1;\n                const castTrack = new chrome.cast.media.Track(trackId, chrome.cast.media.TrackType.TEXT);\n                castTrack.trackContentId = option.src;\n                castTrack.trackContentType = 'text/vtt';\n                castTrack.subtype = chrome.cast.media.TextTrackType.SUBTITLES;\n                castTrack.name = option.label;\n                castTrack.language = option.srclang;\n                castTrack.customData = null;\n                return castTrack;\n            });\n            let contentType = null;\n            const supportedContentTypes = ['application/vnd.ms-sstr+xml', 'video/mp4'];\n            const entitlement = articlePlayConfig.entitlements.find(item => {\n                if (supportedContentTypes.includes(item.type)) {\n                    contentType = item.type;\n                    return true;\n                }\n                else {\n                    return false;\n                }\n            });\n            let protectionConfig = null;\n            if (entitlement) {\n                if (entitlement.protectionInfo) {\n                    protectionConfig = entitlement.protectionInfo.find(protection => {\n                        return protection.type === 'PlayReady';\n                    });\n                }\n                const token = protectionConfig ? protectionConfig.authenticationToken : null;\n                const mediaInfo = new chrome.cast.media.MediaInfo(entitlement.src, contentType);\n                mediaInfo.streamType = chrome.cast.media.StreamType.BUFFERED;\n                mediaInfo.metadata = new chrome.cast.media.GenericMediaMetadata();\n                mediaInfo.metadata.metadataType = chrome.cast.media.MetadataType.GENERIC;\n                mediaInfo.metadata.title = getArticleTitle(article);\n                mediaInfo.tracks = tracks;\n                const licenceUrlParam = token\n                    ? {\n                        ...this.getLicenseUrlFromSrc(protectionConfig.keyDeliveryUrl, token),\n                    }\n                    : {};\n                const audieLocalePram = articlePlayConfig.audioLocale ? { preferredAudioLocale: articlePlayConfig.audioLocale } : {};\n                mediaInfo.customData = {\n                    ...licenceUrlParam,\n                    ...audieLocalePram,\n                    pulseToken: articlePlayConfig.pulseToken,\n                };\n                // @TODO\n                // mediaInfo.currentTime = articlePlayConfig.currentTime;\n                // mediaInfo.autoplay = true;\n                return mediaInfo;\n            }\n        }\n        return null;\n    }\n    getLicenseUrlFromSrc(src, token) {\n        if (token) {\n            const rootSrc = src.includes('?') ? `${src}&token=` : `${src}?token=`;\n            const licenseUrl = rootSrc + encodeURIComponent(token);\n            return {\n                licenseUrl,\n                token,\n            };\n        }\n        return {};\n    }\n    castVideo(playConfig, article, continueFromPreviousPosition) {\n        if (this.isConnected()) {\n            const castSession = this.castContext.getCurrentSession();\n            const mediaInfo = this.getCastMediaInfo(playConfig, article);\n            if (mediaInfo) {\n                const request = new chrome.cast.media.LoadRequest(mediaInfo);\n                request.currentTime = continueFromPreviousPosition ? playConfig.currentTime : 0;\n                if (playConfig.subtitleLocale) {\n                    // can NOT use .filter on tracks because the cast library has patched the Array.\n                    const textTrack = mediaInfo.tracks.find((track) => track.language === playConfig.subtitleLocale);\n                    if (textTrack) {\n                        request.activeTrackIds = [textTrack.trackId];\n                    }\n                }\n                return castSession.loadMedia(request);\n            }\n            else {\n                throw { message: 'Unexpected manifest format in articlePlayConfig' };\n            }\n        }\n    }\n    isConnected() {\n        return this.castPlayer && this.castPlayer.isConnected;\n    }\n    stopCasting() {\n        const castSession = cast.framework.CastContext.getInstance().getCurrentSession();\n        if (castSession) {\n            castSession.endSession(true);\n        }\n    }\n    getCastPlayer() {\n        return this.castPlayer;\n    }\n    getCastPlayerController() {\n        return this.castPlayerController;\n    }\n}\n","export function graphRequest(apiFetchUrl, query, variables, token) {\n    const authHeader = token ? { Authorization: 'Bearer ' + token } : {};\n    return fetch(apiFetchUrl, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n            Accept: 'application/json',\n            ...authHeader,\n        },\n        body: JSON.stringify({\n            query,\n            variables,\n        }),\n    }).then(response => response.json());\n}\n","import { graphRequest } from './graph-request';\nimport { articleAssetPlayMutation, articleQuery } from './queries';\nimport { toArticle, toPlayConfig } from './converters';\nexport class ApiService {\n    constructor(baseUrl, projectId) {\n        this.apiFetchUrl = `${baseUrl}/graphql/${projectId}`;\n        this.token = null;\n    }\n    setToken(token) {\n        this.token = token;\n    }\n    getArticleAssetPlayConfig(articleId, assetId, continueFromPreviousPosition) {\n        return graphRequest(this.apiFetchUrl, articleAssetPlayMutation, { articleId, assetId, protocols: ['dash', 'mss', 'hls'] }, this.token).then((response) => {\n            if (!response || !response.data || response.errors) {\n                const { message, code } = response.errors[0];\n                throw { message, code }; // @TODO to play config error\n            }\n            return toPlayConfig(response.data.ArticleAssetPlay, continueFromPreviousPosition);\n        });\n    }\n    getArticle(articleId) {\n        return graphRequest(this.apiFetchUrl, articleQuery, { articleId }, this.token).then((response) => {\n            if (!response || !response.data || response.errors) {\n                const { message, code } = response.errors[0];\n                throw { message, code };\n            }\n            return toArticle(response.data.Article);\n        });\n    }\n}\n","export const articleAssetPlayMutation = `\n    mutation ArticleAssetPlay($articleId: Int, $assetId: Int, $protocols: [ArticlePlayProtocolEnum]) {\n        ArticleAssetPlay(article_id: $articleId, asset_id: $assetId, protocols: $protocols) {\n            article_id\n            asset_id\n            entitlements {\n                mime_type\n                protocol\n                manifest\n                token\n                encryption_type\n                key_delivery_url\n            }\n            subtitles {\n                url\n                locale\n                locale_label\n            }\n            pulse_token\n            appa\n            appr\n            fairplay_certificate_url\n            user_subtitle_locale\n            user_audio_locale\n            aspect_ratio\n            issued_at\n        }\n    }\n`;\nexport const articleQuery = `\n    query Article($articleId: Int!) {\n        Article(id: $articleId) {\n            id\n            name\n            metas {\n                key\n                value\n            }\n            assets {\n                id\n                duration\n                linked_type\n                accessibility\n            }\n            posters {\n                type\n                url\n                title\n                base_url\n                file_name\n            }\n            images {\n                type\n                url\n                title\n                base_url\n                file_name\n            }\n        }\n    }\n`;\n","import { VideoPlayer } from './video-player/video-player';\nimport { ChromecastSender } from './chromecast/chromecast-sender';\nimport { ApiService } from './api/api-service';\nimport { getArticleBackgroundImage, getResizedUrl, toPlayConfigError } from './api/converters';\nexport class EmbedPlayer {\n    constructor(properties) {\n        this.projectId = properties.projectId;\n        this.apiBaseUrl = properties.apiBaseUrl.replace(/\\/*$/, '');\n        this.chromecastReceiverAppId = properties.chromecastReceiverAppId ? properties.chromecastReceiverAppId : null;\n        this.apiService = new ApiService(this.apiBaseUrl, this.projectId);\n        this.videoPlayer = new VideoPlayer(this.apiBaseUrl, this.projectId);\n        this.castSender = new ChromecastSender();\n    }\n    initVideoPlayer(initParams) {\n        this.videoPlayer.init(initParams);\n    }\n    setVideoPlayerPoster(posterUrl) {\n        this.videoPlayer.setPoster(posterUrl);\n    }\n    setVideoPlayerPosterFromArticle(articleId, posterSize) {\n        return this.apiService.getArticle(articleId).then(article => {\n            this.videoPlayer.setPoster(getResizedUrl(getArticleBackgroundImage(article), posterSize));\n        });\n    }\n    play(playParams) {\n        if (!playParams.articleId) {\n            return Promise.reject('articleId property is missing');\n        }\n        if (!playParams.assetId) {\n            return Promise.reject('assetId property is missing');\n        }\n        this.apiService.setToken(playParams.token ? playParams.token : null);\n        return this.apiService\n            .getArticleAssetPlayConfig(playParams.articleId, playParams.assetId, playParams.continueFromPreviousPosition)\n            .then(config => {\n            this.playVideo(config, playParams);\n            return config;\n        })\n            .catch(error => {\n            console.log(toPlayConfigError(error.code));\n            throw error;\n        });\n    }\n    destroy() {\n        this.videoPlayer.destroy();\n    }\n    playVideo(config, playParams) {\n        this.videoPlayer.play(config, playParams);\n    }\n    getVideoPlayer() {\n        this.videoPlayer.getPlayer();\n    }\n    initChromecast() {\n        if (!this.chromecastReceiverAppId) {\n            return Promise.reject('No Chromecast receiver app id');\n        }\n        return this.castSender.init(this.chromecastReceiverAppId);\n    }\n    appendChromecastButton(selector) {\n        const castButtonContaner = selector instanceof Element ? selector : document.querySelector(selector);\n        const castButton = document.createElement('google-cast-launcher');\n        castButtonContaner.appendChild(castButton);\n    }\n    castVideo({ articleId, assetId, token, continueFromPreviousPosition }) {\n        if (!articleId) {\n            return Promise.reject('articleId property is missing');\n        }\n        if (!assetId) {\n            return Promise.reject('assetId property is missing');\n        }\n        this.apiService.setToken(token);\n        return Promise.all([\n            this.apiService.getArticleAssetPlayConfig(articleId, assetId, continueFromPreviousPosition),\n            this.apiService.getArticle(articleId),\n        ])\n            .then(([config, article]) => {\n            this.castSender.castVideo(config, article, continueFromPreviousPosition);\n            return config;\n        })\n            .catch(error => {\n            console.log(toPlayConfigError(error.code));\n            throw error;\n        });\n    }\n    getCastPlayer() {\n        return this.castSender.getCastPlayer();\n    }\n    getCastPlayerController() {\n        return this.castSender.getCastPlayerController();\n    }\n    isConnected() {\n        return this.castSender.isConnected();\n    }\n    stopCasting() {\n        this.castSender.stopCasting();\n    }\n}\n//*** Example of usage ***//\n// const player = new EmbeddablePlayer();\n//\n// player\n//     .play({\n//         selector: '.video-wrapper',\n//         apiBaseUrl: '',\n//         projectId: '',\n//         articleId: '',\n//         assetId: '',\n//         token: '',\n//         posterImageUrl: '',\n//         fullScreen: false\n//         continueFromPreviousPosition: true\n//     })\n//     .then(config => {\n//         console.log('Config', config);\n//     })\n//     .catch(error => {\n//         console.log('Error', error);\n//     });\n//*** Example of usage with chromecast ***//\n// const player = new EmbeddablePlayer();\n// player.setupChromecast(\"#cast-wrapper\", CHROMECAST_RECEIVER_APP_ID);\n//\n// player\n//     .castVideo({\n//         apiBaseUrl: '',\n//         projectId: '',\n//         articleId: '',\n//         assetId: '',\n//         token: '',\n//         continueFromPreviousPosition: true\n//     })\n//     .then(config => {\n//         console.log('Config', config);\n//     })\n//     .catch(error => {\n//         console.log('Error', error);\n//     });\n","/// <reference path=\"../../node_modules/@types/chromecast-caf-sender/index.d.ts\" />\nexport class ChromecastControls {\n    constructor(player, controller, selector) {\n        this.player = player;\n        this.playerController = controller;\n        this.controlInitialized = false;\n        this.totalDuration = player.duration || 0;\n        this.currentTime = player.currentTime || 0;\n        this.currentStatus = player.playerState;\n        this.createChromecastControlsTemplate(selector);\n        this.bindEvents();\n        this.setPlayButtonClass();\n        this.bindEventsToControls();\n        this.setProgressBarValues();\n        this.setTitle();\n    }\n    bindEvents() {\n        this.playerController.addEventListener(cast.framework.RemotePlayerEventType.MEDIA_INFO_CHANGED, () => {\n            if (this.rootElement && this.player.mediaInfo) {\n                this.renderTracks();\n                this.renderTracksButton();\n                this.setTitle();\n            }\n        });\n        this.playerController.addEventListener(cast.framework.RemotePlayerEventType.CURRENT_TIME_CHANGED, e => {\n            if (this.rootElement) {\n                this.currentTime = e.value;\n                this.totalDuration = this.player.duration;\n                this.setProgressBarValues();\n            }\n        });\n        this.playerController.addEventListener(cast.framework.RemotePlayerEventType.PLAYER_STATE_CHANGED, e => {\n            if (this.rootElement) {\n                this.currentStatus = e.value;\n                this.checkChromecastContainerVisibility();\n                this.setPlayButtonClass();\n                this.setProgressBarValues();\n            }\n        });\n        this.checkChromecastContainerVisibility();\n    }\n    createChromecastControlsTemplate(selector) {\n        const chromecastControlsTemplateString = `\n            <div class=\"chromecast-controls\">\n               <div class=\"chromecast-controls__title\"></div>\n               <div class=\"chromecast-controls__progress-bar\">\n                 <div class=\"chromecast-controls__progress-bar__current\"></div>\n                 <input type=\"range\"\n                        value=\"0\"\n                        class=\"chromecast-controls__progress-bar__slider\" \n                        min=\"0\"\n                        max=\"100\"/>\n                 <div class=\"chromecast-controls__progress-bar__total\"></div>\n               </div>\n              <div class=\"chromecast-controls__buttons\">\n                <button class=\"control-button button__play play-pause-button\" type=\"button\"></button>\n                <button class=\"control-button button__stop\" type=\"button\"></button>\n                <div class=\"buttons-container tracks-button-container\" style=\"display: none\">\n                  <button class=\"control-button button__audio-tracks\" type=\"button\"></button>\n                  <div class=\"chromecast-controls__subtitles\" style=\"display: none\">\n                      <div class=\"chromecast-controls__subtitles__close-icon\">&#215;</div>\n                      <div class=\"container-wrapper container-wrapper_audio-tracks\">\n                        <div class=\"list-title\">Audio tracks</div>\n                      </div>\n                      <div class=\"container-wrapper container-wrapper_text-tracks\">\n                        <div class=\"list-title\">Text tracks</div>\n                      </div>\n                  </div>\n                </div>\n               </div>\n            </div>\n        `;\n        const element = !!selector ? document.querySelector(selector) : document.body;\n        element.insertAdjacentHTML('beforeend', chromecastControlsTemplateString);\n        this.rootElement = element.querySelector('.chromecast-controls');\n        this.rootElement.querySelector('.button__audio-tracks').addEventListener('click', () => this.toggleTracksDialogue());\n        this.rootElement\n            .querySelector('.chromecast-controls__subtitles__close-icon')\n            .addEventListener('click', () => this.toggleTracksDialogue());\n        this.rootElement.querySelector('.chromecast-controls__progress-bar__slider').addEventListener('input', event => {\n            this.seek(event.target.value);\n        });\n    }\n    setPlayButtonClass() {\n        const playAndPauseButton = this.getElement('.play-pause-button');\n        if (this.currentStatus === chrome.cast.media.PlayerState.PAUSED) {\n            playAndPauseButton.classList.replace('button__pause', 'button__play');\n        }\n        else {\n            playAndPauseButton.classList.replace('button__play', 'button__pause');\n        }\n    }\n    bindEventsToControls() {\n        const playAndPauseButton = this.getElement('.play-pause-button');\n        const stopButton = this.getElement('.button__stop');\n        if (!this.controlInitialized) {\n            playAndPauseButton.addEventListener('click', () => this.playPause());\n            stopButton.addEventListener('click', () => this.stop());\n            this.controlInitialized = true;\n        }\n    }\n    renderTracksButton() {\n        const tracksButtonContainerElement = this.getElement('.tracks-button-container');\n        const sessionMediaInfo = cast.framework.CastContext.getInstance()\n            .getCurrentSession()\n            .getMediaSession();\n        let audioTracks = [];\n        let textTracks = [];\n        if (this.player.mediaInfo && this.player.mediaInfo.tracks && sessionMediaInfo) {\n            audioTracks = this.getTracksByType('AUDIO');\n            textTracks = this.getTracksByType('TEXT');\n        }\n        if (audioTracks.length || textTracks.length) {\n            tracksButtonContainerElement.style.display = 'unset';\n        }\n        else {\n            tracksButtonContainerElement.style.display = 'none';\n        }\n    }\n    renderTracks() {\n        this.removeTracks();\n        const audioTracksContainerElement = this.getElement('.container-wrapper_audio-tracks');\n        const textTracksContainerElement = this.getElement('.container-wrapper_text-tracks');\n        const sessionMediaInfo = cast.framework.CastContext.getInstance()\n            .getCurrentSession()\n            .getMediaSession();\n        let audioTracks = [];\n        let textTracks = [];\n        if (this.player.mediaInfo && this.player.mediaInfo.tracks && sessionMediaInfo) {\n            audioTracks = this.getTracksByType('AUDIO');\n            textTracks = this.getTracksByType('TEXT');\n        }\n        if (audioTracks.length) {\n            audioTracksContainerElement.appendChild(this.getTracksList(audioTracks, 'AUDIO'));\n        }\n        if (textTracks.length) {\n            textTracksContainerElement.appendChild(this.getTracksList(textTracks, 'TEXT'));\n        }\n    }\n    removeTracks() {\n        const tracksListElements = this.rootElement.getElementsByClassName('list-container');\n        if (tracksListElements.length) {\n            Array.from(tracksListElements).forEach(element => {\n                element.remove();\n            });\n        }\n    }\n    toggleTracksDialogue() {\n        const tracksContainer = this.getElement('.chromecast-controls__subtitles');\n        if (tracksContainer.style.display === 'none') {\n            this.renderTracks();\n            tracksContainer.style.display = 'unset';\n        }\n        else {\n            tracksContainer.style.display = 'none';\n            this.removeTracks();\n        }\n    }\n    getTracksList(tracks, type) {\n        const tracksListElement = document.createElement('ul');\n        tracksListElement.classList.add('list-container');\n        tracksListElement.addEventListener('click', event => this.setActiveTrack(event, type === 'AUDIO' ? 'AUDIO' : 'TEXT'));\n        tracks.forEach(track => {\n            const listItemElement = document.createElement('li');\n            listItemElement.classList.add('list-item');\n            if (track.active) {\n                listItemElement.classList.add('active');\n            }\n            else {\n                listItemElement.classList.remove('active');\n            }\n            listItemElement.innerText = track.locale;\n            listItemElement.value = track.id;\n            tracksListElement.appendChild(listItemElement);\n        });\n        return tracksListElement;\n    }\n    getActiveTracksByType(type) {\n        return this.getTracksByType(type)\n            .filter(track => track.active)\n            .map(track => track.id);\n    }\n    getTracksByType(type) {\n        const sessionMediaInfo = cast.framework.CastContext.getInstance()\n            .getCurrentSession()\n            .getMediaSession();\n        return this.player.mediaInfo.tracks\n            .filter(track => track.type === type)\n            .map(track => ({\n            id: track.trackId,\n            locale: track.language,\n            active: sessionMediaInfo.activeTrackIds && sessionMediaInfo.activeTrackIds.indexOf(track.trackId) !== -1,\n        }));\n    }\n    setTitle() {\n        if (this.player.mediaInfo) {\n            const titleElement = this.getElement('.chromecast-controls__title');\n            titleElement.innerText = this.player.mediaInfo.metadata.title;\n        }\n    }\n    getTransformedDurationValue(value) {\n        const hours = Math.floor(value / 3600);\n        const minutes = Math.floor((value - hours * 3600) / 60);\n        const seconds = Math.round(value - hours * 3600 - minutes * 60);\n        let result = '';\n        if (!value && value === 0) {\n            return '-';\n        }\n        if (hours > 0) {\n            result = hours + ':';\n            if (minutes < 10) {\n                result += '0';\n            }\n        }\n        result += minutes + ':';\n        if (seconds < 10) {\n            result += '0';\n        }\n        return result + seconds;\n    }\n    setProgressBarValues() {\n        if (this.rootElement) {\n            const currentTimeElement = this.getElement('.chromecast-controls__progress-bar__current');\n            const totalTimeElement = this.getElement('.chromecast-controls__progress-bar__total');\n            const progressBarElement = this.getElement('.chromecast-controls__progress-bar__slider');\n            currentTimeElement.innerText = this.getTransformedDurationValue(this.currentTime);\n            totalTimeElement.innerText = this.getTransformedDurationValue(this.totalDuration);\n            progressBarElement.max = this.totalDuration;\n            progressBarElement.value = this.currentTime;\n        }\n    }\n    checkChromecastContainerVisibility() {\n        if (this.currentStatus === chrome.cast.media.PlayerState.IDLE) {\n            this.rootElement.style.display = 'none';\n        }\n        else {\n            this.rootElement.style.display = 'block';\n        }\n    }\n    playPause() {\n        if (this.player && this.player.isConnected) {\n            this.playerController.playOrPause();\n        }\n    }\n    seek(newTime) {\n        if (this.player && this.player.isConnected) {\n            this.player.currentTime = newTime;\n            this.playerController.seek();\n        }\n    }\n    stop() {\n        if (this.player && this.player.isConnected) {\n            this.playerController.stop();\n        }\n    }\n    setActiveTrack(event, type) {\n        if (event.target instanceof HTMLLIElement && event.target.nodeName === 'LI') {\n            event.stopPropagation();\n            const selectedTrackId = event.target.value;\n            const activeTracks = this.getActiveTracksByType(type === 'AUDIO' ? 'TEXT' : 'AUDIO');\n            if (selectedTrackId > 0 && activeTracks.indexOf(selectedTrackId) === -1) {\n                activeTracks.push(selectedTrackId);\n            }\n            this.setActiveTracks(activeTracks);\n        }\n    }\n    setActiveTracks(trackIds) {\n        if (this.player && this.player.isConnected) {\n            const media = cast.framework.CastContext.getInstance()\n                .getCurrentSession()\n                .getMediaSession();\n            const tracksInfoRequest = new chrome.cast.media.EditTracksInfoRequest(trackIds);\n            media.editTracksInfo(tracksInfoRequest, () => {\n                this.toggleTracksDialogue();\n            }, (error) => console.error('ChromeCast', error));\n        }\n    }\n    getElement(selector) {\n        return this.rootElement.querySelector(selector);\n    }\n}\n"],"names":["PlayingState","PlayerEventTypes","PlayerDeviceTypes","PlayerEventTypePayloads","PulseMode","ArticlePlayErrors","__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","PlayerLogProcessor","constructor","baseUrl","projectId","this","playLogs","apiCallInProgress","intervalHandle","apiUrl","replace","init","setInterval","processFirstPlayLog","destroy","clearInterval","processPlaySession","playSession","timeStamp","eventStack","length","eventStackPayload","i","sumDelta","lastEventWasProcessed","currentEvent","isEventTypeWithoutTimeDelta","eventType","push","convertEventToEventPayload","previousEvent","state","createDeltaEventPayload","lastEvent","lastLogEvent","splice","MAX_EVENTS","event_type","error","event_payload","playLogPayload","getPlayerLogPayloadWithPulseToken","pulseToken","event_stack","pulse_token","pulse_mode","isLive","live","offline","device_type","deviceType","forEach","e","processPlayLog","currentLog","removePlayLog","logToSend","eventStackIndex","isStopCutOff","stop","fetch","method","headers","Accept","body","JSON","stringify","then","catch","status","response","archive","find","log","logPayload","index","findIndex","textTrackChanged","audioTrackChanged","playStart","indexOf","createBaseEventPayload","playerEvent","timestamp","appa","playPosition","appr","Math","min","mediaDuration","play","convertEventTypeToEventTypePayload","baseEvent","audio_locale","audioTrack","subtitle_locale","textTrack","timeDelta","getEventTypePayloadFromEventState","time_delta","playing","paused","buffering","loading","idle","configure","PlayerLoggerService","playerLogProcessor","reset","onStart","localTimeDelta","onStopCallback","onCurrentTimeUpdated","currentTime","playerProperties","logEvent","timeupdate","onDurationUpdated","duration","onPlaying","startInterval","onPause","pause","onError","onStop","stopped","stopInterval","onTextTrackChanged","onAudioTrackChanged","updateProperties","getTimeStamp","Date","now","VideoPlayer","player","playerLoggerService","initParams","videoContainer","selector","Element","document","querySelector","Error","videoElement","createElement","setAttribute","join","appendChild","playOptions","fluid","controls","controlBar","pictureInPictureToggle","currentTimeDisplay","durationDisplay","timeDivider","skipButtons","forward","volumePanel","inline","children","aspectRatio","html5","vhs","overrideNative","options","videojs","eme","bindEvents","playConfig","playParams","firstPlayingEvent","currentSrc","articlePlayConfig","default","hlsSources","entitlements","filter","entitlement","type","configureHLSOnly","browser","IS_SAFARI","IS_IOS","playSources","map","emeOptions","protectionInfo","p","keySystems","keyDeliveryUrl","emeHeaders","Authorization","authenticationToken","certificateUri","certificateUrl","getContentId","uri","link","href","hostname","getHostnameFromUri","getLicense","contentId","keyMessage","callback","payload","a","b","c","d","byteLength","charAt","binaryToBase64","encodeURIComponent","xhr","responseType","httpHandler","err","String","fromCharCode","apply","Uint8Array","trim","substr","ArrayBuffer","f","g","h","buffer","base64ToBinary","parseLicenseResponse","getEmeOptionsFromEntitlement","src","playOption","fullscreen","requestFullscreen","subtitles","track","addRemoteTextTrack","kind","srclang","label","enabled","subtitleLocale","setPoster","posterUrl","poster","ended","dispose","getPlayer","on","audioTracks","element","language","checkSelectedTracks","audioTrackList","setDefaultAudioTrack","setDefaultTextTrack","metadataLoaded","setTimeout","selectedAudioTrack","selectedTextTrack","tracks","textTracks","mode","currentTextTrack","currentAudioTrack","toLowerCase","audioLocale","toFile","file","url","base_url","fileName","file_name","toPlayConfigError","code","offlineError","notAuthenticated","needEntitlement","noPlayableAsset","maxConcurrentStreamNumberError","serverError","ChromecastSender","castContext","castPlayer","castPlayerController","chromecastReceiverAppId","Promise","resolve","reject","window","isAvailable","cast","framework","initializeCastApi","scriptElement","head","CastContext","getInstance","setOptions","receiverApplicationId","autoJoinPolicy","chrome","AutoJoinPolicy","ORIGIN_SCOPED","RemotePlayer","RemotePlayerController","getCastMediaInfo","article","option","trackId","castTrack","media","Track","TrackType","TEXT","trackContentId","trackContentType","subtype","TextTrackType","SUBTITLES","name","customData","contentType","supportedContentTypes","item","includes","protectionConfig","protection","token","mediaInfo","MediaInfo","streamType","StreamType","BUFFERED","metadata","GenericMediaMetadata","metadataType","MetadataType","GENERIC","title","metas","meta","m","value","getMetaValue","getArticleTitle","licenceUrlParam","getLicenseUrlFromSrc","audieLocalePram","preferredAudioLocale","licenseUrl","castVideo","continueFromPreviousPosition","isConnected","castSession","getCurrentSession","request","LoadRequest","activeTrackIds","loadMedia","message","stopCasting","endSession","getCastPlayer","getCastPlayerController","graphRequest","apiFetchUrl","query","variables","json","ApiService","setToken","getArticleAssetPlayConfig","articleId","assetId","protocols","data","errors","config","parse","issued_at","configEntitlements","encryption_type","dashWidevine","protocol","mssPlayReady","configEntitlement","manifest","mime_type","key_delivery_url","fairplay_certificate_url","locale","locale_label","user_subtitle_locale","user_audio_locale","isNaN","aspect_ratio","toPlayConfig","ArticleAssetPlay","getArticle","Article","posters","images","EmbedPlayer","properties","apiBaseUrl","apiService","videoPlayer","castSender","initVideoPlayer","setVideoPlayerPoster","setVideoPlayerPosterFromArticle","posterSize","fileData","size","width","height","getResizedUrl","getArticleBackgroundImage","playVideo","console","getVideoPlayer","initChromecast","appendChromecastButton","castButtonContaner","castButton","all","ChromecastControls","controller","playerController","controlInitialized","totalDuration","currentStatus","playerState","createChromecastControlsTemplate","setPlayButtonClass","bindEventsToControls","setProgressBarValues","setTitle","addEventListener","RemotePlayerEventType","MEDIA_INFO_CHANGED","rootElement","renderTracks","renderTracksButton","CURRENT_TIME_CHANGED","PLAYER_STATE_CHANGED","checkChromecastContainerVisibility","insertAdjacentHTML","toggleTracksDialogue","event","seek","target","playAndPauseButton","getElement","PlayerState","PAUSED","classList","stopButton","playPause","tracksButtonContainerElement","sessionMediaInfo","getMediaSession","getTracksByType","style","display","removeTracks","audioTracksContainerElement","textTracksContainerElement","getTracksList","tracksListElements","getElementsByClassName","Array","from","remove","tracksContainer","tracksListElement","add","setActiveTrack","listItemElement","active","innerText","id","getActiveTracksByType","getTransformedDurationValue","hours","floor","minutes","seconds","round","result","currentTimeElement","totalTimeElement","progressBarElement","max","IDLE","playOrPause","newTime","HTMLLIElement","nodeName","stopPropagation","selectedTrackId","activeTracks","setActiveTracks","trackIds","tracksInfoRequest","EditTracksInfoRequest","editTracksInfo"],"sourceRoot":""}